<!DOCTYPE html>
<html>
        <head>
                <style>
        body {
            /* set margin to 0 and overflow to hidden, to go fullscreen */
            margin: 0;
            overflow: hidden;
        }
    </style>
                <script src="threejs/three.min.js"></script>
                <script src="libs/dat.gui.min.js"></script>
        </head>
        <body>
                <script>
                        var myscene = new THREE.Scene();
                        var mycamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );
                        mycamera.position.set(12,12,12);
                        mycamera.lookAt(new THREE.Vector3( -1, -1, -1 ));
                        myscene.add( mycamera );
                        var myrenderer = new THREE.WebGLRenderer();
                        myrenderer.setSize(window.innerWidth,window.innerHeight);
                        myrenderer.setClearColor(0x008B8B, 1);
						myrenderer.shadowMapEnabled = true;
                        myrenderer.shadowMapSoft = true;						
                       
					   	var material_color = [
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff}),
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff}),
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff}),
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff}),
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff}),
							new THREE.MeshBasicMaterial({color: Math.random() * 0xffffff})
                        ];
						
                        var cubos = new THREE.Object3D();
						
						var n = Math.floor((Math.random() * 5) + 2);
					   
                        for (x=0; x<n; x++){
                            for (y=0; y<n; y++){
                                for (z=0; z<n; z++){
                                    cubo = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1),new THREE.MeshFaceMaterial(material_color));
                                    cubo.position.set((x-(n/2.2))+(x*0.05),
                                                      (y-(n/2.2))+(y*0.05),
                                                      (z-(n/2.2))+(z*0.05));
														
									cubo.castShadow = true;
									cubo.receiveShadow = false;  
                                    cubos.add(cubo);
                                }
                            }
                        }
						cubos.add(cubo);
                        myscene.add(cubos);
						
						                        // add spotlight shadows
                        var spotLight = new THREE.SpotLight(0xFFFFFF,1);
                        spotLight.position.set(-5, 40, 10);
                        spotLight.castShadow = true;
                        spotLight.shadowDarkness = 0.2;
                        spotLight.shadowCameraVisible = true;
                        spotLight.shadowCameraNear = 1;        
                        spotLight.shadowCameraFar = 100;
                        spotLight.shadowCameraFov = 25;
                        spotLight.shadowBias = -0.00022;          
                        spotLight.shadowMapWidth = 512;
                        spotLight.shadowMapHeight = 512;
						
                        myscene.add(spotLight);
                        var ambientLight = new THREE.AmbientLight(0xaaaaaa);
                        myscene.add(ambientLight);
						
						// add ground
						var groundGeometry = new THREE.PlaneGeometry(35, 35);
						ground = new THREE.Mesh(groundGeometry, new THREE.MeshBasicMaterial({color: 0x999991 }));
						ground.position.y = -8;
						ground.rotation.x = -Math.PI / 2;
						ground.receiveShadow = true;
						myscene.add(ground);
                          
                        var rotControls = {
                                rotx:0.0,
                                roty:0.01,
                                rotz:0.0}
                       
                        var guirc = new dat.GUI();
                        guirc.add(rotControls,'rotx',-.25,.25).step(0.05);
                        guirc.add(rotControls,'roty',-.25,.25).step(0.05);
                        guirc.add(rotControls,'rotz',-.25,.25).step(0.05);
                       
                        function doRender() {
                                requestAnimationFrame(doRender);
                                cubos.rotation.x += rotControls.rotx;
                                cubos.rotation.y += rotControls.roty;
                                cubos.rotation.z += rotControls.rotz;
                                myrenderer.render(myscene,mycamera);
                        }
						document.body.appendChild(myrenderer.domElement);
                        doRender();
                </script>
        </body>
</html>
